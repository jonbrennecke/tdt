{
  "name": "win32ole",
  "version": "0.1.3",
  "description": "Asynchronous, non-blocking win32ole bindings",
  "homepage": "https://github.com/idobatter/node-win32ole",
  "keywords": [
    "OLE",
    "COM",
    "ActiveX",
    "ActiveXObject",
    "CreateObject",
    "WSH",
    "WMI",
    "Outlook",
    "Access",
    "Word",
    "Excel",
    "IE",
    "InternetExplorer"
  ],
  "author": {
    "name": "idobatter",
    "email": "idobatter@gmail.com",
    "url": "https://github.com/idobatter"
  },
  "contributors": [
    {
      "name": "idobatter",
      "email": "idobatter@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/idobatter/node-win32ole.git"
  },
  "dependencies": {
    "assert": ">= 0.4.9",
    "async": ">= 0.1.22",
    "ref-struct": ">= 0.0.5",
    "ref": ">= 0.1.3"
  },
  "devDependencies": {
    "mocha": ">= 1.8.1",
    "assert": ">= 0.4.9",
    "async": ">= 0.1.22",
    "ref-struct": ">= 0.0.5",
    "ref": ">= 0.1.3"
  },
  "engines": {
    "node": ">= 0.8.18 && < 0.9.0"
  },
  "scripts": {
    "test": "nmake /a test",
    "install": "node-gyp rebuild"
  },
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "main": "./lib/win32ole",
  "gypfile": true,
  "readme": "# NAME\n\nnode-win32ole - Asynchronous, non-blocking win32ole bindings for [node.js](https://github.com/joyent/node) powered by v8 engine .\n\nwin32ole makes accessibility from node.js to Excel, Word, Access, Outlook, InternetExplorer, WSH ( ActiveXObject / COM ) and so on. It does not need TypeLibrary.\n\n\n# USAGE\n\nInstall with `npm install win32ole`.\n\nIt works as... (version 0.1.x)\n\n``` js\ntry{\n  var win32ole = require('win32ole');\n  // var xl = new ActiveXObject('Excel.Application'); // You may write it as:\n  var xl = win32ole.client.Dispatch('Excel.Application');\n  xl.Visible = true;\n  var book = xl.Workbooks.Add();\n  var sheet = book.Worksheets(1);\n  try{\n    sheet.Name = 'sheetnameA utf8';\n    sheet.Cells(1, 2).Value = 'test utf8';\n    var rg = sheet.Range(sheet.Cells(2, 2), sheet.Cells(4, 4));\n    rg.RowHeight = 5.18;\n    rg.ColumnWidth = 0.58;\n    rg.Interior.ColorIndex = 6; // Yellow\n    var result = book.SaveAs('testfileutf8.xls');\n    console.log(result);\n  }catch(e){\n    console.log('(exception cached)\\n' + e);\n  }\n  xl.ScreenUpdating = true;\n  xl.Workbooks.Close();\n  xl.Quit();\n}catch(e){\n  console.log('*** exception cached ***\\n' + e);\n}\n```\n\nThere are 3 ways to make force Garbage Collection for node.js / v8 .\n\n- 1. use huge memory to run GC automatically ( causes abnormal termination )\n- 2. win32ole.force_gc_extension(1);\n- 3. win32ole.force_gc_internal(1);\n\nsee also [examples/ole_args_test_client.js](https://github.com/idobatter/node-win32ole/blob/master/examples/ole_args_test_client.js)\n\n\n# Tutorial and Examples\n\n- [test/init_win32ole.test.js](https://github.com/idobatter/node-win32ole/blob/master/test/init_win32ole.test.js)\n- [test/unicode.test.js](https://github.com/idobatter/node-win32ole/blob/master/test/unicode.test.js)\n- [examples/maze_creator.js](https://github.com/idobatter/node-win32ole/blob/master/examples/maze_creator.js)\n- [examples/maze_solver.js](https://github.com/idobatter/node-win32ole/blob/master/examples/maze_solver.js)\n- [examples/word_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/word_sample.js)\n- [examples/access_mdb_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/access_mdb_sample.js)\n- [examples/outlook_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/outlook_sample.js)\n- [examples/ie_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/ie_sample.js)\n- [examples/typelibrary_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/typelibrary_sample.js)\n- [examples/uncfinder_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/uncfinder_sample.js)\n- [examples/activex_filesystemobject_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/activex_filesystemobject_sample.js)\n- [examples/wmi_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/wmi_sample.js)\n- [examples/wsh_sample.js](https://github.com/idobatter/node-win32ole/blob/master/examples/wsh_sample.js)\n- [examples/ole_args_test_client.js](https://github.com/idobatter/node-win32ole/blob/master/examples/ole_args_test_client.js)\n- [examples/ole_args_test_client_metamorphoses.js](https://github.com/idobatter/node-win32ole/blob/master/examples/ole_args_test_client_metamorphoses.js)\n\n\n# Other built in functions\n\n* win32ole.version(void) // returns version string\n* win32ole.printACP(utf8string) // Utf8 to .ACP\n* win32ole.print(utf8string) // ASCII\n* win32ole.gettimeofday(struct timeval &tv, null) // now arg2 is not used\n* win32ole.sleep(long milliseconds, bool withmessage=false, bool with\\n=false)\n* win32ole.force_gc_extension(long flag) // now flag is dummy\n* win32ole.force_gc_internal(long flag, string) // now flag is dummy\n\n\n# FEATURES\n\n* fix BUG: date\n* BUG: A few samples in win32ole@0.1.0 needs '._' ideom.\n* When you use unary operator '!' at the place that needs boolean CONDITION (for example 'while(!obj.status){...}') , you must write 'while(!obj.status._){...}' to complete v8::Object::ToBoolean() conversion. (NamedPropertyHandler will not be called because v8::Object::ToBoolean() is called directly for unary operator '!' instead of v8::Object::valueOf() in ParseUnaryExpression() v8/src/parser.cc .) Do you know how to fake it?\n* V8Variant::OLEGetAttr returns a copy of object, so it uses much memory. I want to fix it.\n* Now '._' ideom is obsoleted.\n* Remove 'node-proxy' from dependencies list.\n* Change default branch to dev0.1.0 .\n* BUG: Some samples in between win32ole@0.0.25 and win32ole@0.0.28 ( examples/maze_creator.js examples/maze_solver.js ) uses huge memory and many disposers will run by v8 GC when maze size is 20*30. I think that each encapsulated V8Variant (by node-proxy) may be big object. So I will try to use v8 accessor handlers ( SetCallAsFunctionHandler / SetNamedPropertyHandler / SetIndexedPropertyHandler ) instead of ( '__noSuchMethod__' / '__noSuchGetter__' / '__noSuchSetter__' ) by node-proxy.\n* So much implements. (can not handle some COM VARIANT types, array etc.)\n* Bug fix. (throws exception when failed to Invoke(), and many test message.)\n* Implement accessors getter, setter and caller. (version 0.1.x) (Some V8Variants were advanced to 0.1.x .)\n\n\n# API\n\nSee the [API documentation](https://github.com/idobatter/node-win32ole/wiki) in the wiki.\n\n\n# BUILDING\n\nThis project uses VC++ 2008 Express (or later) and Python 2.6 (or later) .\n(When using Python 2.5, it needs [multiprocessing 2.5 back port](http://pypi.python.org/pypi/multiprocessing/) .) It needs neither ATL nor MFC.\n\nBulding also requires node-gyp to be installed. You can do this with npm:\n\n    npm install -g node-gyp\n\nTo obtain and build the bindings:\n\n    git clone git://github.com/idobatter/node-win32ole.git\n    cd node-win32ole\n    node-gyp configure\n    node-gyp build\n\nYou can also use [`npm`](https://github.com/isaacs/npm) to download and install them:\n\n    npm install win32ole\n\n\n# TESTS\n\n[mocha](https://github.com/visionmedia/mocha) is required to run unit tests.\n\n    npm install -g mocha\n    nmake /a test\n\n\n# CONTRIBUTORS\n\n* [idobatter](https://github.com/idobatter)\n\n\n# ACKNOWLEDGEMENTS\n\nInspired [Win32OLE](http://www.ruby-doc.org/stdlib/libdoc/win32ole/rdoc/)\n\n\n# LICENSE\n\n`node-win32ole` is [BSD licensed](https://github.com/idobatter/node-win32ole/raw/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "_id": "win32ole@0.1.3",
  "dist": {
    "shasum": "ecb4858f387618b8c285f369a836c5e32b003acf",
    "tarball": "http://registry.npmjs.org/win32ole/-/win32ole-0.1.3.tgz"
  },
  "_from": "win32ole@",
  "_npmVersion": "1.2.2",
  "_npmUser": {
    "name": "idobatter",
    "email": "idobatter@gmail.com"
  },
  "maintainers": [
    {
      "name": "idobatter",
      "email": "idobatter@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "ecb4858f387618b8c285f369a836c5e32b003acf",
  "_resolved": "https://registry.npmjs.org/win32ole/-/win32ole-0.1.3.tgz"
}
